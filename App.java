/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bolsaempleo;

import java.awt.Color;
import java.awt.Desktop;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author ruben
 */
public class App extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    public App() {
        initComponents();
        customizaFrame();
        conectaBD();
        btnOfertas.doClick();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelBotones = new javax.swing.JPanel();
        btnOfertas = new javax.swing.JButton();
        btnCiclos = new javax.swing.JButton();
        btnAlumnos = new javax.swing.JButton();
        btnEmpresas = new javax.swing.JButton();
        panelAcciones = new javax.swing.JPanel();
        tituloSeccion = new javax.swing.JLabel();
        btnAñadir = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        infoIES = new javax.swing.JLabel();
        btnVer = new javax.swing.JButton();
        panelContenido = new javax.swing.JPanel();
        jScrollPaneContenido = new javax.swing.JScrollPane();
        textoBuscar = new javax.swing.JTextField();
        comboBuscar = new javax.swing.JComboBox<>();
        btnBuscar = new javax.swing.JButton();
        checkActiva = new javax.swing.JCheckBox();
        menuBar = new javax.swing.JMenuBar();
        menuItemArchivo = new javax.swing.JMenu();
        jMenuItemAcercaDe = new javax.swing.JMenuItem();
        jMenuItemManual = new javax.swing.JMenuItem();
        jMenuItemSalir = new javax.swing.JMenuItem();
        jMenuCorreo = new javax.swing.JMenu();
        jMenuItemConfigMail = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Bolsa de empleo IES Castillo de la Yedra");
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnOfertas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/ofertas.png"))); // NOI18N
        btnOfertas.setMnemonic('o');
        btnOfertas.setToolTipText("<html>Gestionar <b>ofertas");
        btnOfertas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOfertasActionPerformed(evt);
            }
        });

        btnCiclos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/ciclos.png"))); // NOI18N
        btnCiclos.setMnemonic('c');
        btnCiclos.setToolTipText("<html>Gestionar <b>ciclos formativos</b>");
        btnCiclos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCiclosActionPerformed(evt);
            }
        });

        btnAlumnos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/alumnos.png"))); // NOI18N
        btnAlumnos.setMnemonic('a');
        btnAlumnos.setToolTipText("<html>Gestionar <b>alumnos</b>");
        btnAlumnos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlumnosActionPerformed(evt);
            }
        });

        btnEmpresas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/empresas.png"))); // NOI18N
        btnEmpresas.setMnemonic('e');
        btnEmpresas.setToolTipText("<html>Gestionar <b>empresas</b>");
        btnEmpresas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmpresasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelBotonesLayout = new javax.swing.GroupLayout(panelBotones);
        panelBotones.setLayout(panelBotonesLayout);
        panelBotonesLayout.setHorizontalGroup(
            panelBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBotonesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCiclos)
                    .addComponent(btnEmpresas)
                    .addComponent(btnOfertas)
                    .addComponent(btnAlumnos))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelBotonesLayout.setVerticalGroup(
            panelBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBotonesLayout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addComponent(btnOfertas)
                .addGap(37, 37, 37)
                .addComponent(btnCiclos)
                .addGap(37, 37, 37)
                .addComponent(btnAlumnos)
                .addGap(37, 37, 37)
                .addComponent(btnEmpresas)
                .addGap(110, 110, 110))
        );

        getContentPane().add(panelBotones, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 680));

        tituloSeccion.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        tituloSeccion.setText("Ofertas de empleo");

        btnAñadir.setBackground(new java.awt.Color(232, 232, 232));
        btnAñadir.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        btnAñadir.setText("Añadir");
        btnAñadir.setToolTipText("<html>Abre formulario <b>añadir");
        btnAñadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAñadirActionPerformed(evt);
            }
        });

        btnModificar.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        btnModificar.setText("Modificar");
        btnModificar.setToolTipText("<html>Abre formulario <b>modificar</b> si antes has seleccionado un elemento de la lista");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnEliminar.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.setToolTipText("<html>Abre formulario <b>eliminar</b> si antes has seleccionado un elemento de la lista");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        infoIES.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        infoIES.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/logoIES.png"))); // NOI18N
        infoIES.setText("<html>Bolsa de empleo </br>\nIES Castillo de la Yedra</br>");

        btnVer.setBackground(new java.awt.Color(232, 232, 232));
        btnVer.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        btnVer.setText("Ver");
        btnVer.setToolTipText("<html>Abre formulario <b>ver</b> si antes has seleccionado un elemento de la lista");
        btnVer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelAccionesLayout = new javax.swing.GroupLayout(panelAcciones);
        panelAcciones.setLayout(panelAccionesLayout);
        panelAccionesLayout.setHorizontalGroup(
            panelAccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAccionesLayout.createSequentialGroup()
                .addGroup(panelAccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAccionesLayout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addGroup(panelAccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAñadir, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnVer, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelAccionesLayout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(panelAccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(infoIES, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tituloSeccion, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        panelAccionesLayout.setVerticalGroup(
            panelAccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAccionesLayout.createSequentialGroup()
                .addComponent(tituloSeccion, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(btnAñadir, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(83, 83, 83)
                .addComponent(btnModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(83, 83, 83)
                .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(83, 83, 83)
                .addComponent(btnVer, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addComponent(infoIES, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        getContentPane().add(panelAcciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 0, 230, 680));

        jScrollPaneContenido.setToolTipText("<html>Selecciona una fila de la tabla para:<br>\n<b>1. Activar botón modificar<br>\n2. Activar botoón eliminar<br>\n3. Activar botón ver <br>\n</b>sobre el elemento seleccionado.<br>\nSi el elemento es una <b>oferta de empleo</b><br> \nal pulsar en <b>ver</b> podremos </b>enviar la oferta</b><br>\nvía email a los alumnos</html>");

        textoBuscar.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        textoBuscar.setText("Introduce término de búsqueda...");
        textoBuscar.setToolTipText("<html> Introduce el <b>término a buscar</b> y activa el botón <b>buscar</b>");
        textoBuscar.setNextFocusableComponent(comboBuscar);
        textoBuscar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                textoBuscarMouseClicked(evt);
            }
        });
        textoBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textoBuscarActionPerformed(evt);
            }
        });

        comboBuscar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboBuscar.setToolTipText("<html>Selecciona uno de los elementos del combobox como <b>parámetro de búsqueda</b>");
        comboBuscar.setNextFocusableComponent(btnBuscar);
        comboBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBuscarActionPerformed(evt);
            }
        });

        btnBuscar.setBackground(new java.awt.Color(232, 232, 232));
        btnBuscar.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.setToolTipText("<html>Realiza una <b>búsqueda</b> para los parámetros indicados");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        checkActiva.setText("Activa");

        javax.swing.GroupLayout panelContenidoLayout = new javax.swing.GroupLayout(panelContenido);
        panelContenido.setLayout(panelContenidoLayout);
        panelContenidoLayout.setHorizontalGroup(
            panelContenidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelContenidoLayout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addGroup(panelContenidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPaneContenido)
                    .addGroup(panelContenidoLayout.createSequentialGroup()
                        .addComponent(textoBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(comboBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52)
                        .addComponent(checkActiva)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                        .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(66, 66, 66))
        );
        panelContenidoLayout.setVerticalGroup(
            panelContenidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelContenidoLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(panelContenidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textoBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkActiva))
                .addGap(18, 18, 18)
                .addComponent(jScrollPaneContenido, javax.swing.GroupLayout.PREFERRED_SIZE, 576, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        getContentPane().add(panelContenido, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 0, 870, 678));

        menuItemArchivo.setText("Archivo");
        menuItemArchivo.setToolTipText("Menú archivo");

        jMenuItemAcercaDe.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemAcercaDe.setText("Acerca de");
        jMenuItemAcercaDe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAcercaDeActionPerformed(evt);
            }
        });
        menuItemArchivo.add(jMenuItemAcercaDe);

        jMenuItemManual.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemManual.setText("Manual de usuario");
        jMenuItemManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemManualActionPerformed(evt);
            }
        });
        menuItemArchivo.add(jMenuItemManual);

        jMenuItemSalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemSalir.setText("Cerrar aplicación");
        jMenuItemSalir.setToolTipText("Cierra la aplicación");
        jMenuItemSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSalirActionPerformed(evt);
            }
        });
        menuItemArchivo.add(jMenuItemSalir);

        menuBar.add(menuItemArchivo);

        jMenuCorreo.setText("Correo");
        jMenuCorreo.setToolTipText("Menú correo");

        jMenuItemConfigMail.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemConfigMail.setText("Configurar email");
        jMenuItemConfigMail.setToolTipText("<html>Abre formulario de <b>configuración email</b> que se usará");
        jMenuItemConfigMail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                aConfigurarCorreo(evt);
            }
        });
        jMenuItemConfigMail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemConfigMailActionPerformed(evt);
            }
        });
        jMenuCorreo.add(jMenuItemConfigMail);

        menuBar.add(jMenuCorreo);

        setJMenuBar(menuBar);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAlumnosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlumnosActionPerformed
        this.ver = "alumnos";
        cambiarVista(ver);
    }//GEN-LAST:event_btnAlumnosActionPerformed

    private void btnOfertasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOfertasActionPerformed
        this.ver = "ofertas";
        cambiarVista(ver);
    }//GEN-LAST:event_btnOfertasActionPerformed

    private void btnCiclosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCiclosActionPerformed
        this.ver = "ciclos";
        cambiarVista(ver);
    }//GEN-LAST:event_btnCiclosActionPerformed

    private void btnEmpresasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmpresasActionPerformed
        this.ver = "empresas";
        cambiarVista(ver);
    }//GEN-LAST:event_btnEmpresasActionPerformed

    private void textoBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textoBuscarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textoBuscarActionPerformed

    private void btnVerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerActionPerformed
        switch (ver) {
            case "ofertas":
                System.out.println("AVISO: Abro formulario vista de oferta de empleo");
                verOferta();
                break;
            case "ciclos":
                verCiclo();
                break;
            case "alumnos":
                verAlumno();
                break;
            case "empresas":
                verEmpresa();
                break;
            default:
                break;
        }
    }//GEN-LAST:event_btnVerActionPerformed

    private void jMenuItemSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSalirActionPerformed
        bd.cerrarConexion();
        System.exit(0);
    }//GEN-LAST:event_jMenuItemSalirActionPerformed

    private void btnAñadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAñadirActionPerformed
        switch (ver) {
            case "ofertas":
                System.out.println("AVISO: Abro formulario añadir oferta");
                ofertasForm.darConexionAbierta(bd);
                ofertasForm.darVentanaApp(this);
                ofertasForm.preparaFormNuevo();
                ofertasForm.setVisible(true);
                break;
            case "ciclos":
                System.out.println("AVISO: Abro formulario añadir ciclo formativo");
                ciclosForm.darConexionAbierta(bd);
                ciclosForm.darVentanaApp(this);
                ciclosForm.preparaFormNuevo();
                ciclosForm.setVisible(true);
                break;
            case "alumnos":
                System.out.println("AVISO: Abro formulario añadir alumno");
                alumnosForm.darConexionAbierta(bd);
                alumnosForm.darVentanaApp(this);
                alumnosForm.preparaFormNuevo();
                alumnosForm.setVisible(true);
                break;
            case "empresas":
                System.out.println("AVISO: Abro formulario añadir empresa");
                empresasForm.darConexionAbierta(bd);
                empresasForm.darVentanaApp(this);
                empresasForm.preparaFormNuevo();
                empresasForm.setVisible(true);
                break;
            default:
                break;
        }
    }//GEN-LAST:event_btnAñadirActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        switch (ver) {
            case "ofertas":
                modificarOferta();
                break;
            case "ciclos":
                modificarCiclo();
                break;
            case "alumnos":
                modificarAlumno();
                break;
            case "empresas":
                modificarEmpresa();
                break;
            default:
                break;
        }
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        switch (ver) {
            case "ofertas":
                eliminarOferta();
                break;
            case "ciclos":
                eliminarCiclo();
                break;
            case "alumnos":
                eliminarAlumno();
                break;
            case "empresas":
                eliminarEmpresa();
                break;
            default:
                break;
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    /**
     * Realizo la búsqueda
     *
     * @param evt
     */
    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        System.out.println("Pulso en buscar en tabla: " + ver);
        String texto = textoBuscar.getText();
        String combo = comboBuscar.getSelectedItem().toString();
        System.out.println("Parámetros de búsqueda: " + texto + " en " + combo);
        switch (ver) {
            case "ofertas":
                if (combo.equals("Ciclo formativo")) {
                    combo = "ciclo_formativo";
                } else if (combo.equals("Nombre de empresa")) {
                    combo = "empresa";
                }
                muestraTablaOfertas(combo, texto, true);
                break;
            case "ciclos":
                if (combo.equals("Nombre de ciclo")) {
                    combo = "nombre";
                } else if (combo.equals("Rama")) {
                    combo = "rama";
                }
                muestraTablaCiclos(combo, texto, true);
                break;
            case "alumnos":
                if (combo.equals("Nombre de alumno")) {
                    combo = "nombre";
                } else if (combo.equals("Ciclo formativo")) {
                    combo = "ciclo_formativo";
                }
                muestraTablaAlumnos(combo, texto, true);
                break;
            case "empresas":
                if (combo.equals("Nombre de empresa")) {
                    combo = "nombre";
                } else if (combo.equals("Sector")) {
                    combo = "sector";
                }
                System.out.println("ENTROOOOO");
                muestraTablaEmpresas(combo, texto, true);
                break;
            default:
                break;
        }
        btnBuscar.setEnabled(false);
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void jMenuItemConfigMailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemConfigMailActionPerformed
        configurarMailForm.darConexionAbierta(bd);
        configurarMailForm.darVentanaApp(this);
        configurarMailForm.preparaForm();
        configurarMailForm.setVisible(true);
    }//GEN-LAST:event_jMenuItemConfigMailActionPerformed

    private void aConfigurarCorreo(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aConfigurarCorreo

    }//GEN-LAST:event_aConfigurarCorreo

    private void comboBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBuscarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBuscarActionPerformed

    /**
     * Limpio el cuadro de búsqueda y activo botón buscar
     *
     * @param evt
     */
    private void textoBuscarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textoBuscarMouseClicked
        textoBuscar.setText("");
        btnBuscar.setEnabled(true);
    }//GEN-LAST:event_textoBuscarMouseClicked
    
    /**
     * Muestra información de la aplicación
     * @param evt 
     */
    private void jMenuItemAcercaDeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAcercaDeActionPerformed
        JOptionPane.showMessageDialog(null, "Bolsa de empleo IES Castillo de la Yedra \nVersión 1.0 \nDesarrollada como proyecto integrado del ciclo formativo DAM \npor Rubén Segura Romo\n© Todos los derechos reservados","Acerca de", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItemAcercaDeActionPerformed

    /**
     * Abre el manual de usuario de la aplicación
     * @param evt 
     */
    private void jMenuItemManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemManualActionPerformed
        File file = new File("manual.pdf");
        if (!Desktop.isDesktopSupported()) {
            JOptionPane.showMessageDialog(null, "No se ha encontrado ninguna aplicación compatible \npara abrir el manual de usuario", "Error al abrir manual", JOptionPane.WARNING_MESSAGE);
            return;
        }
        Desktop desktop = Desktop.getDesktop();
        if (file.exists()) {
            try {
                desktop.open(file);
            } catch (IOException ex) {
                System.out.println(ex.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(null, "El manual de usuario no se ha encontrado en el sistema", "Manual de usuario no disponible", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jMenuItemManualActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new App().setVisible(true);
        });
    }

    private int dameIdEmpresa(String nombre) {
        int id = 0;
        nombre = "%"+nombre+"%";
        try {
            ResultSet rs;
            PreparedStatement consulta;
            consulta = this.bd.dameConexion().prepareStatement("SELECT empresa_id FROM empresa WHERE nombre LIKE  ?");
            consulta.setString(1, nombre);
            rs = consulta.executeQuery();
            id = rs.getInt("empresa_id");
            System.out.println("MENSAJE: ID de empresa obtenido => " + id);
        } catch (SQLException e) {
            System.out.println("ERROR AL BUSCAR ID EMPRESA: " + e.getMessage());
        }
        return id;
    }

    /**
     * Establece la conexión a la base de datos
     */
    private void conectaBD() {
        bd = new BD("bolsa-empleo.db");
        bd.conexionBD();
        try {
            bd.consulta.executeUpdate("PRAGMA foreign_keys=on");
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        } finally {
            System.out.println("AVISO: Pragma claves foráneas ejecutados");
        }
    }

    /**
     * Customiza el frame principal de la aplicación
     */
    private void customizaFrame() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/img/logoIES.png")));
        panelBotones.setBackground(colorPanelAcciones);
        panelContenido.setBackground(colorPanelContenido);
        menuBar.setOpaque(true);
        menuBar.setBackground(colorPanelContenido);
        btnAlumnos.setBackground(colorPanelContenido);
        btnEmpresas.setBackground(colorPanelContenido);
        btnOfertas.setBackground(colorPanelContenido);
        btnCiclos.setBackground(colorPanelContenido);
        btnAñadir.setBackground(colorPanelContenido);
        btnModificar.setBackground(colorPanelContenido);
        btnEliminar.setBackground(colorPanelContenido);
        btnVer.setBackground(colorPanelContenido);
        jScrollPaneContenido.setBackground(colorPanelContenido);
        ponerAtajos();
        this.tituloSeccion.setHorizontalAlignment(SwingConstants.CENTER);
    }

    /**
     * Desactiva botones
     */
    public void desactivarBotones() {
        btnModificar.setEnabled(false);
        btnEliminar.setEnabled(false);
        btnVer.setEnabled(false);
        btnBuscar.setEnabled(false);
    }

    /**
     * Activa los botones
     */
    private void activarBotones() {
        btnModificar.setEnabled(true);
        btnEliminar.setEnabled(true);
        btnVer.setEnabled(true);
    }

    /**
     * Controla que sección se está viendo
     */
    private void cambiarVista(String vista) {
        switch (vista) {
            case "ofertas":
                this.tituloSeccion.setText("Ofertas de empleo");
                muestraTablaOfertas("", "", false);
                desactivarBotones();
                textoBuscar.setText("Introduce término de búsqueda...");
                comboBuscar.removeAllItems();
                comboBuscar.addItem("Nombre de empresa");
                comboBuscar.addItem("Ciclo formativo");
                checkActiva.setVisible(true);
                checkActiva.setSelected(true);
                break;
            case "ciclos":
                this.tituloSeccion.setText("Ciclos formativos");
                muestraTablaCiclos("", "", false);
                desactivarBotones();
                textoBuscar.setText("Introduce término de búsqueda...");
                comboBuscar.removeAllItems();
                comboBuscar.addItem("Nombre de ciclo");
                comboBuscar.addItem("Rama");
                checkActiva.setVisible(false);
                break;
            case "alumnos":
                this.tituloSeccion.setText("Alumnos");
                muestraTablaAlumnos("", "", false);
                desactivarBotones();
                textoBuscar.setText("Introduce término de búsqueda...");
                comboBuscar.removeAllItems();
                comboBuscar.addItem("Nombre de alumno");
                comboBuscar.addItem("Ciclo formativo");
                checkActiva.setVisible(false);
                break;
            case "empresas":
                this.tituloSeccion.setText("Empresas");
                muestraTablaEmpresas("", "", false);
                desactivarBotones();
                textoBuscar.setText("Introduce término de búsqueda...");
                comboBuscar.removeAllItems();
                comboBuscar.addItem("Nombre de empresa");
                comboBuscar.addItem("Sector");
                checkActiva.setVisible(false);
                break;
            default:
                btnOfertas.doClick();
                desactivarBotones();
                textoBuscar.setText("Introduce término de búsqueda...");
                break;
        }
        System.out.println("AVISO: Cambio de vista");
    }

    /**
     * Muestra tabla OFERTAS
     */
    public void muestraTablaOfertas(String tipo, String busqueda, Boolean esBusqueda) {
        JTable tablaOfertas = new JTable(0, 5);
        tablaActual = tablaOfertas;
        tablaOfertas.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    System.out.println("MENSAJE: dobleClic en fila de tabla ofertas");
                    btnVer.doClick();
                } else if (e.getClickCount() == 1) {
                    System.out.println("MENSAJE: clic en fila de tabla ofertas");
                    activarBotones();
                }
            }
        });
        tablaOfertas.setDefaultEditor(Object.class, null);
        tablaOfertas.setToolTipText("<html>Selecciona una fila de la tabla para:<br>\n"
                + "<b>1. Activar botón modificar<br>\n"
                + "2. Activar botoón eliminar<br>\n"
                + "3. Activar botón ver <br>\n"
                + "</b>sobre el elemento seleccionado.<br>\n"
                + "Si el elemento es una <b>oferta de empleo</b><br> \n"
                + "al pulsar en <b>ver</b> podremos </b>enviar la oferta</b><br>\n"
                + "vía email a los alumnos</html>");
        tablaOfertas.setFont(new Font("Arial", Font.PLAIN, 13));
        JTableHeader cabecera = tablaOfertas.getTableHeader();
        cabecera.setFont(new Font("Arial", Font.BOLD, 13));
        TableColumnModel tcm = cabecera.getColumnModel();
        TableColumn fecha = tcm.getColumn(0);
        TableColumn empresa = tcm.getColumn(1);
        TableColumn ciclo = tcm.getColumn(2);
        TableColumn activa = tcm.getColumn(4);
        TableColumn tipo_oferta = tcm.getColumn(3);
        fecha.setHeaderValue("Fecha publicación");
        empresa.setHeaderValue("Empresa");
        ciclo.setHeaderValue("Ciclo formativo");
        activa.setHeaderValue("Oferta activa");
        tipo_oferta.setHeaderValue("Tipo");
        cabecera.repaint();
        jScrollPaneContenido.getViewport().add(tablaOfertas);
        jScrollPaneContenido.repaint();
        DefaultTableModel model = (DefaultTableModel) tablaOfertas.getModel();
        for (int i = model.getRowCount() - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        try {
            ResultSet rs;
            String mensaje;
            if (tipo.equals("")) {
                System.out.println("MENSAJE: Listo todas las OFERTAS");
                rs = this.bd.consulta.executeQuery("SELECT O.fecha_publicacion, O.activa, O.tipo, C.nombre AS nombre_ciclo, E.nombre AS nombre_empresa "
                        + "FROM oferta O, ciclo C, empresa E "
                        + "WHERE O.empresa = E.empresa_id "
                        + "AND O.ciclo_formativo = C.codigo_junta");
                if (rs.next()) {
                    do {
                        model.addRow(new Object[]{
                            rs.getString("fecha_publicacion"),
                            rs.getString("nombre_empresa"),
                            rs.getString("nombre_ciclo"),
                            rs.getString("tipo"),
                            rs.getInt("activa"),});
                    } while (rs.next());
                }
            } else {
                System.out.println("Listo ofertas por " + busqueda + " en " + tipo);
                int ofertaActiva=0;
                if (checkActiva.isSelected()) {
                    ofertaActiva = 1;
                } else {
                    ofertaActiva = 0;
                }
                System.out.println("--- OFERTA ACTIVA MARCADO => "+ofertaActiva);
                if (tipo.equals("empresa")) {
                    System.out.println("---- BUSCO OFERTAS POR NOMBRE DE EMPRESA ---");
                    int idEmp = dameIdEmpresa(busqueda);
                    PreparedStatement consulta;
                    consulta = this.bd.dameConexion().prepareStatement("SELECT O.fecha_publicacion, O.activa, O.tipo, C.nombre AS nombre_ciclo, E.nombre AS nombre_empresa "
                            + "FROM oferta O, ciclo C, empresa E "
                            + "WHERE O.empresa = E.empresa_id "
                            + "AND O.ciclo_formativo = C.codigo_junta "
                            + "AND " + tipo + " = ? "
                            + "AND activa = ?");
                    consulta.setInt(1, idEmp);
                    consulta.setInt(2, ofertaActiva);
                    rs = consulta.executeQuery();
                    if (esBusqueda && !rs.next()) {
                        mensaje = "No se han encontrado coincidencias en la búsqueda con los parámetros indicados.";
                        JOptionPane.showMessageDialog(null, mensaje, "Resultado de la búsqueda", JOptionPane.INFORMATION_MESSAGE);
                        muestraTablaOfertas("", "", false);
                        textoBuscar.setText("Introduce término de búsqueda...");
                        desactivarBotones();
                    } else {
                        do {
                            model.addRow(new Object[]{
                                rs.getString("fecha_publicacion"),
                                rs.getString("nombre_empresa"),
                                rs.getString("nombre_ciclo"),
                                rs.getString("tipo"),
                                rs.getInt("activa"),});
                        } while (rs.next());
                    }
                    rs.close();
                } else {
                    System.out.println("---- BUSCO OFERTAS POR NOMBRE DE CICLO ---");
                    int codigoCiclo = dameIdCiclo(busqueda);
                    PreparedStatement consulta;
                    consulta = this.bd.dameConexion().prepareStatement("SELECT O.fecha_publicacion, O.activa, O.tipo, C.nombre AS nombre_ciclo, E.nombre AS nombre_empresa "
                            + "FROM oferta O, ciclo C, empresa E "
                            + "WHERE O.empresa = E.empresa_id "
                            + "AND O.ciclo_formativo = C.codigo_junta "
                            + "AND " + tipo + " = ? "
                            + "AND activa = ?");
                    consulta.setInt(1, codigoCiclo);
                    consulta.setInt(2, ofertaActiva);
                    rs = consulta.executeQuery();
                    if (esBusqueda && !rs.next()) {
                        mensaje = "No se han encontrado coincidencias en la búsqueda con los parámetros indicados.";
                        JOptionPane.showMessageDialog(null, mensaje, "Resultado de la búsqueda", JOptionPane.INFORMATION_MESSAGE);
                        muestraTablaOfertas("", "", false);
                        textoBuscar.setText("Introduce término de búsqueda...");
                        desactivarBotones();
                    } else {
                        do {
                            model.addRow(new Object[]{
                                rs.getString("fecha_publicacion"),
                                rs.getString("nombre_empresa"),
                                rs.getString("nombre_ciclo"),
                                rs.getString("tipo"),
                                rs.getInt("activa"),});
                        } while (rs.next());
                    }
                    rs.close();
                }
            }
        } catch (SQLException e) {
            System.out.println("ERROR: " + e.getMessage());
        }
        tcm.getColumn(4).setMaxWidth(0);
        tcm.getColumn(4).setMinWidth(0);
        cabecera.getColumnModel().getColumn(4).setMaxWidth(0);
        cabecera.getColumnModel().getColumn(4).setMinWidth(0);
    }

    /**
     * Abro ventana modificar oferta
     */
    private void modificarOferta() {
        System.out.println("AVISO: Abro formulario modificar oferta");
        int fila = tablaActual.getSelectedRow();
        String fecha = (String) tablaActual.getModel().getValueAt(fila, 0);
        int idEmpresa = 0, idCiclo = 0, activa = 0, alumnoContratado = 0;
        String tipo = "", descripcion = "", requisitos = "";
        // Busco la oferta en BD para obtener sus campos
        try {
            ResultSet rs;
            rs = this.bd.consulta.executeQuery("SELECT empresa, ciclo_formativo, activa, tipo, descripcion, requisitos, alumno_contratado FROM oferta WHERE fecha_publicacion = '" + fecha + "'");
            if (rs.next()) {
                idEmpresa = rs.getInt("empresa");
                idCiclo = rs.getInt("ciclo_formativo");
                activa = rs.getInt("activa");
                tipo = rs.getString("tipo");
                descripcion = rs.getString("descripcion");
                requisitos = rs.getString("requisitos");
                alumnoContratado = rs.getInt("alumno_contratado");
            }
        } catch (SQLException e) {
            System.out.println("ERROR: " + e.getMessage());
        }
        //Abro formulario con los datos
        ofertasForm.darConexionAbierta(bd);
        ofertasForm.darVentanaApp(this);
        ofertasForm.preparaFormMod(fecha, idEmpresa, idCiclo, activa, tipo, descripcion, requisitos, alumnoContratado);
        ofertasForm.setVisible(true);
    }

    /**
     * Eliminar oferta
     */
    private void eliminarOferta() {
        System.out.println("AVISO: Voy a eliminar oferta");
        int fila = tablaActual.getSelectedRow();
        String fecha = (String) tablaActual.getModel().getValueAt(fila, 0);
        System.out.println("MENSAJE: fecha id del oferta: " + fecha);
        int opcion = JOptionPane.showConfirmDialog(null, "¿Realmente deseas eliminar la oferta de empleo seleccionada?", "¡Atención!", JOptionPane.YES_NO_OPTION);
        // 0 es si, 1 es no
        if (opcion == 0) {
            System.out.println("Confirmo eliminación");
            PreparedStatement consulta;
            try {
                consulta = this.bd.dameConexion().prepareStatement("DELETE FROM oferta WHERE fecha_publicacion = ?");
                consulta.setString(1, fecha);
                consulta.execute();
                JOptionPane.showMessageDialog(null, "La oferta de empleo ha sido eliminada correctamente", "Oferta eliminado", JOptionPane.INFORMATION_MESSAGE);
                muestraTablaOfertas("", "", false);
            } catch (SQLException ex) {
                System.out.println("AVISO: ERROR AL BORRAR OFERTA DE EMPELO => " + ex.getMessage());
            }

        } else {
            System.out.println("No voy a eliminarlo finalmente");
        }
        desactivarBotones();
    }

    private void verOferta() {
        System.out.println("AVISO: Abro formulario ver oferta");
        int fila = tablaActual.getSelectedRow();
        String fecha = (String) tablaActual.getModel().getValueAt(fila, 0);
        int idEmpresa = 0, idCiclo = 0, activa = 0, alumnoContratado = 0;
        String tipo = "", descripcion = "", requisitos = "";
        // Busco la oferta en BD para obtener sus campos
        try {
            ResultSet rs;
            rs = this.bd.consulta.executeQuery("SELECT empresa, ciclo_formativo, activa, tipo, descripcion, requisitos, alumno_contratado FROM oferta WHERE fecha_publicacion = '" + fecha + "'");
            if (rs.next()) {
                idEmpresa = rs.getInt("empresa");
                idCiclo = rs.getInt("ciclo_formativo");
                activa = rs.getInt("activa");
                tipo = rs.getString("tipo");
                descripcion = rs.getString("descripcion");
                requisitos = rs.getString("requisitos");
                alumnoContratado = rs.getInt("alumno_contratado");
            }
        } catch (SQLException e) {
            System.out.println("ERROR: " + e.getMessage());
        }
        //Abro formulario con los datos
        verOfertaForm.darConexionAbierta(bd);
        verOfertaForm.darVentanaApp(this);
        verOfertaForm.preparaVista(fecha, idEmpresa, idCiclo, activa, tipo, descripcion, requisitos, alumnoContratado);
        verOfertaForm.setTitle("Oferta de empleo");
        verOfertaForm.tituloOferta.setText("Oferta de empleo");
        verOfertaForm.setVisible(true);
    }

    /**
     * Muestra tabla CICLOS
     */
    public void muestraTablaCiclos(String tipo, String busqueda, Boolean esBusqueda) {
        JTable tablaCiclos = new JTable(0, 5);
        tablaActual = tablaCiclos;
        tablaCiclos.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    System.out.println("MENSAJE: dobleClic en fila de tabla ciclo");
                    btnVer.doClick();
                } else if (e.getClickCount() == 1) {
                    System.out.println("MENSAJE: clic en fila de tabla ciclo");
                    activarBotones();
                }
            }
        });
        tablaCiclos.setDefaultEditor(Object.class, null);
        tablaCiclos.setToolTipText("<html>Selecciona una fila de la tabla para:<br>\n"
                + "<b>1. Activar botón modificar<br>\n"
                + "2. Activar botoón eliminar<br>\n"
                + "3. Activar botón ver <br>\n"
                + "</b>sobre el elemento seleccionado.<br>\n"
                + "Si el elemento es una <b>oferta de empleo</b><br> \n"
                + "al pulsar en <b>ver</b> podremos </b>enviar la oferta</b><br>\n"
                + "vía email a los alumnos</html>");
        tablaCiclos.setFont(new Font("Arial", Font.PLAIN, 13));
        JTableHeader cabecera = tablaCiclos.getTableHeader();
        cabecera.setFont(new Font("Arial", Font.BOLD, 13));
        TableColumnModel tcm = cabecera.getColumnModel();
        TableColumn codigo = tcm.getColumn(0);
        TableColumn nombre = tcm.getColumn(1);
        TableColumn rama = tcm.getColumn(2);
        TableColumn nivel = tcm.getColumn(3);
        TableColumn impartido = tcm.getColumn(4);
        codigo.setHeaderValue("Código Junta");
        nombre.setHeaderValue("Nombre");
        rama.setHeaderValue("Rama");
        nivel.setHeaderValue("Nivel");
        impartido.setHeaderValue("Es impartido");
        cabecera.repaint();
        jScrollPaneContenido.getViewport().add(tablaCiclos);
        jScrollPaneContenido.repaint();
        DefaultTableModel model = (DefaultTableModel) tablaCiclos.getModel();
        for (int i = model.getRowCount() - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        try {
            ResultSet rs;
            String mensaje;
            if (tipo.equals("")) {
                System.out.println("MENSAJE: Listo todos los CICLOS");
                rs = this.bd.consulta.executeQuery("SELECT * FROM ciclo");
                if (rs.next()) {
                    do {
                        model.addRow(new Object[]{
                            rs.getInt("codigo_junta"),
                            rs.getString("nombre"),
                            rs.getString("rama"),
                            rs.getString("nivel"),
                            rs.getInt("impartido")
                        });
                    } while (rs.next());
                }
            } else {
                System.out.println("Listo CICLOS por " + busqueda + " en " + tipo);
                busqueda = "%" + busqueda + "%";
                PreparedStatement consulta;
                consulta = this.bd.dameConexion().prepareStatement("SELECT * FROM ciclo WHERE " + tipo + " LIKE ?");
                consulta.setString(1, busqueda);
                rs = consulta.executeQuery();
                if (esBusqueda && !rs.next()) {
                    mensaje = "No se han encontrado coincidencias en la búsqueda con los parámetros indicados.";
                    JOptionPane.showMessageDialog(null, mensaje, "Resultado de la búsqueda", JOptionPane.INFORMATION_MESSAGE);
                    muestraTablaOfertas("", "", false);
                    textoBuscar.setText("Introduce término de búsqueda...");
                    desactivarBotones();
                } else {
                    do {
                        model.addRow(new Object[]{
                            rs.getInt("codigo_junta"),
                            rs.getString("nombre"),
                            rs.getString("rama"),
                            rs.getString("nivel"),
                            rs.getInt("impartido")
                        });
                    } while (rs.next());
                }
            }
            rs.close();
        } catch (SQLException e) {
            System.out.println("ERROR: " + e.getMessage());
        }
        tcm.getColumn(4).setMaxWidth(0);
        tcm.getColumn(4).setMinWidth(0);
        cabecera.getColumnModel().getColumn(4).setMaxWidth(0);
        cabecera.getColumnModel().getColumn(4).setMinWidth(0);
    }

    /**
     * Abro ventana modificar ciclo
     */
    private void modificarCiclo() {
        System.out.println("AVISO: Abro formulario modificar ciclo formativo");
        int fila = tablaActual.getSelectedRow();
        int codigo = (Integer) tablaActual.getModel().getValueAt(fila, 0);
        System.out.println("Codigo junta del ciclo: " + codigo);
        String nombre = (String) tablaActual.getModel().getValueAt(fila, 1);
        String rama = (String) tablaActual.getModel().getValueAt(fila, 2);
        String nivel = (String) tablaActual.getModel().getValueAt(fila, 3);
        int impartido = (Integer) tablaActual.getModel().getValueAt(fila, 4);
        ciclosForm.darConexionAbierta(bd);
        ciclosForm.darVentanaApp(this);
        ciclosForm.preparaFormMod(codigo, nombre, rama, nivel, impartido);
        ciclosForm.inputCodigo.setEditable(false);
        ciclosForm.setVisible(true);
    }

    /**
     * Eliminar ciclo
     */
    private void eliminarCiclo() {
        System.out.println("AVISO: Voy a eliminar ciclo");
        int fila = tablaActual.getSelectedRow();
        int codigo = (Integer) tablaActual.getModel().getValueAt(fila, 0);
        System.out.println("MENSAJE: código de junta del ciclo " + codigo);
        int opcion = JOptionPane.showConfirmDialog(null, "¿Realmente deseas eliminar el ciclo formativo seleccionado?", "¡Atención!", JOptionPane.YES_NO_OPTION);
        // 0 es si, 1 es no
        if (opcion == 0) {
            System.out.println("Confirmo eliminación");
            PreparedStatement consulta;
            try {
                consulta = this.bd.dameConexion().prepareStatement("DELETE FROM ciclo WHERE codigo_junta = ?");
                consulta.setInt(1, codigo);
                consulta.execute();
                JOptionPane.showMessageDialog(null, "El ciclo formativo ha sido eliminado correctamente", "Ciclo eliminado", JOptionPane.INFORMATION_MESSAGE);
                muestraTablaCiclos("", "", false);
            } catch (SQLException ex) {
                System.out.println("AVISO: ERROR AL BORRAR CICLO => " + ex.getMessage());
            }

        } else {
            System.out.println("No voy a eliminarlo finalmente");
        }
        desactivarBotones();
    }

    private void verCiclo() {
        System.out.println("AVISO: Abro vista de ciclo formativo");
        int fila = tablaActual.getSelectedRow();
        int codigo = (Integer) tablaActual.getModel().getValueAt(fila, 0);
        System.out.println("Codigo junta del ciclo: " + codigo);
        String nombre = (String) tablaActual.getModel().getValueAt(fila, 1);
        String rama = (String) tablaActual.getModel().getValueAt(fila, 2);
        String nivel = (String) tablaActual.getModel().getValueAt(fila, 3);
        int impartido = (Integer) tablaActual.getModel().getValueAt(fila, 4);
        vistaCicloForm.darVentanaApp(this);
        vistaCicloForm.preparaVista(codigo, nombre, rama, nivel, impartido);
        vistaCicloForm.setVisible(true);
    }

    /**
     * Muestra tabla ALUMNOS
     *
     * @param tipo
     * @param busqueda
     * @param esBusqueda
     */
    public void muestraTablaAlumnos(String tipo, String busqueda, Boolean esBusqueda) {
        JTable tablaAlumnos = new JTable(0, 6);
        tablaActual = tablaAlumnos;
        tablaAlumnos.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    System.out.println("MENSAJE: dobleClic en fila de tabla alumnos");
                    btnVer.doClick();
                } else if (e.getClickCount() == 1) {
                    System.out.println("MENSAJE: clic en fila de tabla alumnos");
                    activarBotones();
                }
            }
        });
        tablaAlumnos.setDefaultEditor(Object.class, null);
        tablaAlumnos.setToolTipText("<html>Selecciona una fila de la tabla para:<br>\n"
                + "<b>1. Activar botón modificar<br>\n"
                + "2. Activar botoón eliminar<br>\n"
                + "3. Activar botón ver <br>\n"
                + "</b>sobre el elemento seleccionado.<br>\n"
                + "Si el elemento es una <b>oferta de empleo</b><br> \n"
                + "al pulsar en <b>ver</b> podremos </b>enviar la oferta</b><br>\n"
                + "vía email a los alumnos</html>");
        tablaAlumnos.setFont(new Font("Arial", Font.PLAIN, 13));
        JTableHeader cabecera = tablaAlumnos.getTableHeader();
        cabecera.setFont(new Font("Arial", Font.BOLD, 13));
        TableColumnModel tcm = cabecera.getColumnModel();
        TableColumn id = tcm.getColumn(0);
        TableColumn nombre = tcm.getColumn(1);
        TableColumn email = tcm.getColumn(2);
        TableColumn exp = tcm.getColumn(3);
        TableColumn trabaja = tcm.getColumn(4);
        TableColumn ciclo = tcm.getColumn(5);
        id.setHeaderValue("Id");
        nombre.setHeaderValue("Nombre");
        email.setHeaderValue("Email");
        exp.setHeaderValue("Experiencia");
        trabaja.setHeaderValue("Trabaja actualmente");
        ciclo.setHeaderValue("Ciclo formativo");
        cabecera.repaint();
        jScrollPaneContenido.getViewport().add(tablaAlumnos);
        jScrollPaneContenido.repaint();
        DefaultTableModel model = (DefaultTableModel) tablaAlumnos.getModel();
        for (int i = model.getRowCount() - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        try {
            ResultSet rs;
            String mensaje;
            if (tipo.equals("")) {
                System.out.println("MENSAJE: Listo todos los ALUMNOS");
                rs = this.bd.consulta.executeQuery("SELECT alumno_id, A.nombre, A.email, A.experiencia, A.trabajando, C.nombre AS nombre_ciclo FROM alumno A, ciclo C WHERE A.ciclo_formativo = C.codigo_junta");
                if (rs.next()) {
                    do {
                        model.addRow(new Object[]{
                            rs.getInt("alumno_id"),
                            rs.getString("nombre"),
                            rs.getString("email"),
                            rs.getString("experiencia"),
                            rs.getString("trabajando"),
                            rs.getString("nombre_ciclo")
                        });
                    } while (rs.next());
                }
            } else {
                System.out.println("Listo alumnos por " + busqueda + " en " + tipo);
                if (tipo.equals("nombre")) {
                    System.out.println("---- BUSCO ALUMNOS POR NOMBRE DE ALUMNO ---");
                    busqueda = "%" + busqueda + "%";
                    PreparedStatement consulta;
                    consulta = this.bd.dameConexion().prepareStatement("SELECT alumno_id, A.nombre, A.email, A.experiencia, A.trabajando, C.nombre AS nombre_ciclo "
                            + "FROM alumno A, ciclo C WHERE A.ciclo_formativo = C.codigo_junta "
                            + "AND A."+tipo+" LIKE ?");
                    consulta.setString(1, busqueda);
                    rs = consulta.executeQuery();
                    if (esBusqueda && !rs.next()) {
                        mensaje = "No se han encontrado coincidencias en la búsqueda con los parámetros indicados.";
                        JOptionPane.showMessageDialog(null, mensaje, "Resultado de la búsqueda", JOptionPane.INFORMATION_MESSAGE);
                        muestraTablaAlumnos("", "", false);
                        textoBuscar.setText("Introduce término de búsqueda...");
                        desactivarBotones();
                    } else {
                        do {
                            model.addRow(new Object[]{
                                rs.getInt("alumno_id"),
                                rs.getString("nombre"),
                                rs.getString("email"),
                                rs.getString("experiencia"),
                                rs.getString("trabajando"),
                                rs.getString("nombre_ciclo")
                            });
                        } while (rs.next());
                    }
                    rs.close();
                } else {
                    System.out.println("---- BUSCO ALUMNOS POR NOMBRE DE CICLO ---");
                    int codigoCiclo = dameIdCiclo(busqueda);
                    PreparedStatement consulta;
                    consulta = this.bd.dameConexion().prepareStatement("SELECT alumno_id, A.nombre, A.email, A.experiencia, A.trabajando, C.nombre AS nombre_ciclo "
                                                                    + "FROM alumno A, ciclo C "
                                                                    + "WHERE A.ciclo_formativo = C.codigo_junta "
                                                                    + "AND " + tipo + " = ?");
                    consulta.setInt(1, codigoCiclo);
                    rs = consulta.executeQuery();
                    if (esBusqueda && !rs.next()) {
                        mensaje = "No se han encontrado coincidencias en la búsqueda con los parámetros indicados.";
                        JOptionPane.showMessageDialog(null, mensaje, "Resultado de la búsqueda", JOptionPane.INFORMATION_MESSAGE);
                        muestraTablaAlumnos("", "", false);
                        textoBuscar.setText("Introduce término de búsqueda...");
                        desactivarBotones();
                    } else {
                        do {
                            model.addRow(new Object[]{
                                rs.getInt("alumno_id"),
                                rs.getString("nombre"),
                                rs.getString("email"),
                                rs.getString("experiencia"),
                                rs.getString("trabajando"),
                                rs.getString("nombre_ciclo")
                            });
                        } while (rs.next());
                    }
                    rs.close();
                }
            }
        } catch (SQLException e) {
            System.out.println("ERROR: " + e.getMessage());
        }
        tcm.getColumn(0).setMaxWidth(0);
        tcm.getColumn(0).setMinWidth(0);
        cabecera.getColumnModel().getColumn(0).setMaxWidth(0);
        cabecera.getColumnModel().getColumn(0).setMinWidth(0);
        tcm.getColumn(4).setMaxWidth(0);
        tcm.getColumn(4).setMinWidth(0);
        cabecera.getColumnModel().getColumn(4).setMaxWidth(0);
        cabecera.getColumnModel().getColumn(4).setMinWidth(0);
        tcm.getColumn(3).setMaxWidth(0);
        tcm.getColumn(3).setMinWidth(0);
        cabecera.getColumnModel().getColumn(3).setMaxWidth(0);
        cabecera.getColumnModel().getColumn(3).setMinWidth(0);
    }

    /**
     * Abro ventana modificar alumno
     */
    private void modificarAlumno() {
        System.out.println("AVISO: Abro formulario modificar alumno");
        int fila = tablaActual.getSelectedRow();
        int id = (Integer) tablaActual.getModel().getValueAt(fila, 0);
        String nombre = (String) tablaActual.getModel().getValueAt(fila, 1);
        String email = (String) tablaActual.getModel().getValueAt(fila, 2);
        String experiencia = (String) tablaActual.getModel().getValueAt(fila, 3);
        String trabajaStr = (String) tablaActual.getModel().getValueAt(fila, 4);
        int trabaja = Integer.parseInt(trabajaStr);
        String ciclo = (String) tablaActual.getModel().getValueAt(fila, 5);
        alumnosForm.darConexionAbierta(bd);
        alumnosForm.darVentanaApp(this);
        alumnosForm.preparaFormMod(id, nombre, email, experiencia, trabaja, ciclo);
        alumnosForm.setVisible(true);
    }

    /**
     * Eliminar alumno
     */
    private void eliminarAlumno() {
        System.out.println("AVISO: Voy a eliminar alumno");
        int fila = tablaActual.getSelectedRow();
        int codigo = (Integer) tablaActual.getModel().getValueAt(fila, 0);
        System.out.println("MENSAJE: código de alumno" + codigo);
        int opcion = JOptionPane.showConfirmDialog(null, "¿Realmente deseas eliminar el alumno seleccionado?", "¡Atención!", JOptionPane.YES_NO_OPTION);
        // 0 es si, 1 es no
        if (opcion == 0) {
            System.out.println("Confirmo eliminación");
            PreparedStatement consulta;
            try {
                consulta = this.bd.dameConexion().prepareStatement("DELETE FROM alumno WHERE alumno_id = ?");
                consulta.setInt(1, codigo);
                consulta.execute();
                JOptionPane.showMessageDialog(null, "El alumno ha sido eliminado correctamente", "Alumno eliminado", JOptionPane.INFORMATION_MESSAGE);
                muestraTablaAlumnos("", "", false);
            } catch (SQLException ex) {
                System.out.println("AVISO: ERROR AL BORRAR ALUMNO => " + ex.getMessage());
            }

        } else {
            System.out.println("No voy a eliminarlo finalmente");
        }
        desactivarBotones();
    }

    /**
     * Preparo la vista de alumno
     */
    private void verAlumno() {
        System.out.println("AVISO: Abro vista del alumno");
        int fila = tablaActual.getSelectedRow();
        int id = (Integer) tablaActual.getModel().getValueAt(fila, 0);
        String nombre = (String) tablaActual.getModel().getValueAt(fila, 1);
        String email = (String) tablaActual.getModel().getValueAt(fila, 2);
        String experiencia = (String) tablaActual.getModel().getValueAt(fila, 3);
        String trabajaStr = (String) tablaActual.getModel().getValueAt(fila, 4);
        int trabaja = Integer.parseInt(trabajaStr);
        String ciclo = (String) tablaActual.getModel().getValueAt(fila, 5);
        vistaAlumnoForm.darConexionAbierta(bd);
        vistaAlumnoForm.darVentanaApp(this);
        vistaAlumnoForm.preparaVista(id, nombre, email, experiencia, trabaja, ciclo);
        vistaAlumnoForm.setVisible(true);
    }

    /**
     * Muestra tabla EMPRESAS
     */
    public void muestraTablaEmpresas(String tipo, String busqueda, Boolean esBusqueda) {
        JTable tablaEmpresas = new JTable(0, 8);
        tablaActual = tablaEmpresas;
        tablaEmpresas.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    System.out.println("MENSAJE: dobleClic en fila de tabla empresas");
                    btnVer.doClick();
                } else if (e.getClickCount() == 1) {
                    System.out.println("MENSAJE: clic en fila de tabla empresas");
                    activarBotones();
                }
            }
        });
        tablaEmpresas.setDefaultEditor(Object.class, null);
        tablaEmpresas.setToolTipText("<html>Selecciona una fila de la tabla para:<br>\n"
                + "<b>1. Activar botón modificar<br>\n"
                + "2. Activar botoón eliminar<br>\n"
                + "3. Activar botón ver <br>\n"
                + "</b>sobre el elemento seleccionado.<br>\n"
                + "Si el elemento es una <b>oferta de empleo</b><br> \n"
                + "al pulsar en <b>ver</b> podremos </b>enviar la oferta</b><br>\n"
                + "vía email a los alumnos</html>");
        tablaEmpresas.setFont(new Font("Arial", Font.PLAIN, 13));
        JTableHeader cabecera = tablaEmpresas.getTableHeader();
        cabecera.setFont(new Font("Arial", Font.BOLD, 13));
        TableColumnModel tcm = cabecera.getColumnModel();
        TableColumn id = tcm.getColumn(0);
        TableColumn nombre = tcm.getColumn(1);
        TableColumn email = tcm.getColumn(2);
        TableColumn tlf = tcm.getColumn(3);
        TableColumn encargado = tcm.getColumn(4);
        TableColumn sector = tcm.getColumn(5);
        TableColumn practicas = tcm.getColumn(6);
        TableColumn datosAdicionales = tcm.getColumn(7);
        id.setHeaderValue("Id");
        nombre.setHeaderValue("Nombre");
        email.setHeaderValue("Email");
        tlf.setHeaderValue("Teléfono");
        encargado.setHeaderValue("Persona encargada");
        sector.setHeaderValue("Sector");
        practicas.setHeaderValue("Acepta prácticas");
        datosAdicionales.setHeaderValue("Datos adicionales");
        cabecera.repaint();
        jScrollPaneContenido.getViewport().add(tablaEmpresas);
        jScrollPaneContenido.repaint();
        DefaultTableModel model = (DefaultTableModel) tablaEmpresas.getModel();
        for (int i = model.getRowCount() - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        try {
            ResultSet rs;
            String mensaje;
            if (tipo.equals("")) {
                System.out.println("MENSAJE: Listo todos los EMPRESAS");
                rs = this.bd.consulta.executeQuery("SELECT * FROM empresa");
                if (rs.next()) {
                    do {
                        model.addRow(new Object[]{
                            rs.getInt("empresa_id"),
                            rs.getString("nombre"),
                            rs.getString("email"),
                            rs.getString("telefono"),
                            rs.getString("persona_encargada"),
                            rs.getString("sector"),
                            rs.getInt("acepta_practicas"),
                            rs.getString("datos_adicionales")
                        });
                    } while (rs.next());
                }
            } else {
                System.out.println("Listo EMPRESAS por " + busqueda + " en " + tipo);
                busqueda = "%" + busqueda + "%";
                PreparedStatement consulta;
                consulta = this.bd.dameConexion().prepareStatement("SELECT * FROM empresa WHERE " + tipo + " LIKE ?");
                consulta.setString(1, busqueda);
                rs = consulta.executeQuery();
                if (esBusqueda && !rs.next()) {
                    mensaje = "No se han encontrado coincidencias en la búsqueda con los parámetros indicados.";
                    JOptionPane.showMessageDialog(null, mensaje, "Resultado de la búsqueda", JOptionPane.INFORMATION_MESSAGE);
                    muestraTablaEmpresas("", "", false);
                    textoBuscar.setText("Introduce término de búsqueda...");
                    desactivarBotones();
                } else {
                    do {
                        model.addRow(new Object[]{
                            rs.getInt("empresa_id"),
                            rs.getString("nombre"),
                            rs.getString("email"),
                            rs.getString("telefono"),
                            rs.getString("persona_encargada"),
                            rs.getString("sector"),
                            rs.getInt("acepta_practicas"),
                            rs.getString("datos_adicionales")
                        });
                    } while (rs.next());
                }
            }
            rs.close();
        } catch (SQLException e) {
            System.out.println("ERROR: " + e.getMessage());
        }
        tcm.getColumn(0).setMaxWidth(0);
        tcm.getColumn(0).setMinWidth(0);
        cabecera.getColumnModel().getColumn(0).setMaxWidth(0);
        cabecera.getColumnModel().getColumn(0).setMinWidth(0);
        tcm.getColumn(2).setMaxWidth(0);
        tcm.getColumn(2).setMinWidth(0);
        cabecera.getColumnModel().getColumn(2).setMaxWidth(0);
        cabecera.getColumnModel().getColumn(2).setMinWidth(0);
        tcm.getColumn(3).setMaxWidth(0);
        tcm.getColumn(3).setMinWidth(0);
        cabecera.getColumnModel().getColumn(3).setMaxWidth(0);
        cabecera.getColumnModel().getColumn(3).setMinWidth(0);
        tcm.getColumn(6).setMaxWidth(0);
        tcm.getColumn(6).setMinWidth(0);
        cabecera.getColumnModel().getColumn(6).setMaxWidth(0);
        cabecera.getColumnModel().getColumn(6).setMinWidth(0);
        tcm.getColumn(7).setMaxWidth(0);
        tcm.getColumn(7).setMinWidth(0);
        cabecera.getColumnModel().getColumn(7).setMaxWidth(0);
        cabecera.getColumnModel().getColumn(7).setMinWidth(0);
    }

    /**
     * Abro ventana modificar empresa
     */
    private void modificarEmpresa() {
        System.out.println("AVISO: Abro formulario modificar empresa");
        int fila = tablaActual.getSelectedRow();
        int id = (Integer) tablaActual.getModel().getValueAt(fila, 0);
        String nombre = (String) tablaActual.getModel().getValueAt(fila, 1);
        String email = (String) tablaActual.getModel().getValueAt(fila, 2);
        String telefono = (String) tablaActual.getModel().getValueAt(fila, 3);
        String encargado = (String) tablaActual.getModel().getValueAt(fila, 4);
        String sector = (String) tablaActual.getModel().getValueAt(fila, 5);
        int practicas = (Integer) tablaActual.getModel().getValueAt(fila, 6);
        String datosAdicionales = (String) tablaActual.getModel().getValueAt(fila, 7);
        System.out.println("Datos adicionales: " +datosAdicionales);
        empresasForm.darConexionAbierta(bd);
        empresasForm.darVentanaApp(this);
        empresasForm.preparaFormMod(id, nombre, email, telefono, encargado, sector, practicas, datosAdicionales);
        empresasForm.setVisible(true);
    }

    /**
     * Eliminar empresa
     */
    private void eliminarEmpresa() {
        System.out.println("AVISO: Voy a eliminar empresa");
        int fila = tablaActual.getSelectedRow();
        int codigo = (Integer) tablaActual.getModel().getValueAt(fila, 0);
        System.out.println("MENSAJE: código de empresa" + codigo);
        int opcion = JOptionPane.showConfirmDialog(null, "¿Realmente deseas eliminar la empresa seleccionada?", "¡Atención!", JOptionPane.YES_NO_OPTION);
        // 0 es si, 1 es no
        if (opcion == 0) {
            System.out.println("Confirmo eliminación");
            PreparedStatement consulta;
            try {
                consulta = this.bd.dameConexion().prepareStatement("DELETE FROM empresa WHERE empresa_id = ?");
                consulta.setInt(1, codigo);
                consulta.execute();
                JOptionPane.showMessageDialog(null, "La empresa ha sido eliminada correctamente", "Empresa eliminada", JOptionPane.INFORMATION_MESSAGE);
                muestraTablaEmpresas("", "", false);
            } catch (SQLException ex) {
                System.out.println("AVISO: ERROR AL BORRAR EMPRESA => " + ex.getMessage());
            }

        } else {
            System.out.println("No voy a eliminarlo finalmente");
        }
        desactivarBotones();
    }

    /**
     * Abro vista de empresa
     */
    private void verEmpresa() {
        System.out.println("AVISO: Abro vista de empresa");
        int fila = tablaActual.getSelectedRow();
        int id = (Integer) tablaActual.getModel().getValueAt(fila, 0);
        String nombre = (String) tablaActual.getModel().getValueAt(fila, 1);
        String email = (String) tablaActual.getModel().getValueAt(fila, 2);
        String telefono = (String) tablaActual.getModel().getValueAt(fila, 3);
        String encargado = (String) tablaActual.getModel().getValueAt(fila, 4);
        String sector = (String) tablaActual.getModel().getValueAt(fila, 5);
        int practicas = (Integer) tablaActual.getModel().getValueAt(fila, 6);
        String adicional = (String) tablaActual.getModel().getValueAt(fila, 7);
        vistaEmpresaForm.darVentanaApp(this);
        vistaEmpresaForm.preparaVista(id, nombre, email, telefono, encargado, sector, practicas,adicional);
        vistaEmpresaForm.setVisible(true);
    }
    
    /**
     * Poner nemonicos
     */
    public void ponerAtajos() {
        btnCiclos.setMnemonic('C');
        btnOfertas.setMnemonic('O');
        btnEmpresas.setMnemonic('E');
        btnAlumnos.setMnemonic('A');
    }

    /**
     * Valida el ciclo formativo escogido en el combo y devuelve su codigo_junta
     */
    private int dameIdCiclo(String nombre) {
        int id = 0;
        nombre = "%"+nombre+"%";
        try {
            ResultSet rs;
            PreparedStatement consulta;
            consulta = this.bd.dameConexion().prepareStatement("SELECT codigo_junta FROM ciclo WHERE nombre LIKE ?");
            consulta.setString(1, nombre);
            rs = consulta.executeQuery();
            id = rs.getInt("codigo_junta");
            System.out.println("MENSAJE: código de junta obtenido " + id);
        } catch (SQLException e) {
            System.out.println("ERROR: " + e.getMessage());
        }
        return id;
    }

    // Variable de control de visualización de secciones
    private String ver = "ofertas"; // por defecto ofertas de empleo

    // Clases propias
    private BD bd;

    // Formularios
    FormularioCiclos ciclosForm = new FormularioCiclos(this, rootPaneCheckingEnabled);
    FormularioEmpresas empresasForm = new FormularioEmpresas(this, rootPaneCheckingEnabled);
    FormularioAlumnos alumnosForm = new FormularioAlumnos(this, rootPaneCheckingEnabled);
    FormularioOfertas ofertasForm = new FormularioOfertas(this, rootPaneCheckingEnabled);
    FormularioVerOferta verOfertaForm = new FormularioVerOferta(this, rootPaneCheckingEnabled);
    FormularioConfigEmail configurarMailForm = new FormularioConfigEmail(this, rootPaneCheckingEnabled);
    FormularioVerCiclo vistaCicloForm = new FormularioVerCiclo(this, rootPaneCheckingEnabled);
    FormularioVerAlumnos vistaAlumnoForm = new FormularioVerAlumnos(this, rootPaneCheckingEnabled);
    FormularioVerEmpresa vistaEmpresaForm = new FormularioVerEmpresa(this, rootPaneCheckingEnabled);

    // Tabla actual
    JTable tablaActual;

    // Colores de la aplicación
    Color colorPanelAcciones = new Color(85, 136, 163);
    Color colorPanelContenido = new Color(232, 232, 232);

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAlumnos;
    private javax.swing.JButton btnAñadir;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnCiclos;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnEmpresas;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnOfertas;
    private javax.swing.JButton btnVer;
    private javax.swing.JCheckBox checkActiva;
    private javax.swing.JComboBox<String> comboBuscar;
    private javax.swing.JLabel infoIES;
    private javax.swing.JMenu jMenuCorreo;
    private javax.swing.JMenuItem jMenuItemAcercaDe;
    private javax.swing.JMenuItem jMenuItemConfigMail;
    private javax.swing.JMenuItem jMenuItemManual;
    private javax.swing.JMenuItem jMenuItemSalir;
    private javax.swing.JScrollPane jScrollPaneContenido;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuItemArchivo;
    private javax.swing.JPanel panelAcciones;
    private javax.swing.JPanel panelBotones;
    private javax.swing.JPanel panelContenido;
    private javax.swing.JTextField textoBuscar;
    private javax.swing.JLabel tituloSeccion;
    // End of variables declaration//GEN-END:variables
}
