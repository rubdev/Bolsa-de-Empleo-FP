/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bolsaempleo;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Frame;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;

/**
 *
 * @author ruben
 */
public class FormularioOfertas extends javax.swing.JDialog {

    /**
     * Creates new form FormularioOfertas
     */
    public FormularioOfertas(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setSize(450, 700);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelCabecera = new javax.swing.JPanel();
        panelContenido = new javax.swing.JPanel();
        titulo = new javax.swing.JLabel();
        labelEmpresa = new javax.swing.JLabel();
        labelCiclo = new javax.swing.JLabel();
        labelTipo = new javax.swing.JLabel();
        labelDescripcion = new javax.swing.JLabel();
        labelRequisitos = new javax.swing.JLabel();
        labelActiva = new javax.swing.JLabel();
        labelContratadi = new javax.swing.JLabel();
        idEmpresa = new javax.swing.JTextField();
        inputEmpresa = new javax.swing.JTextField();
        btnBuscaEmpresa = new javax.swing.JButton();
        comboCiclos = new javax.swing.JComboBox<>();
        comboTipo = new javax.swing.JComboBox<>();
        jScrollPaneDesc = new javax.swing.JScrollPane();
        textoDescripcion = new javax.swing.JTextArea();
        jScrollPaneReq = new javax.swing.JScrollPane();
        textoRequisitos = new javax.swing.JTextArea();
        checkActiva = new javax.swing.JCheckBox();
        checkContratado = new javax.swing.JCheckBox();
        fecha = new javax.swing.JTextField();
        btnCancelar = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(449, 663));
        setMinimumSize(new java.awt.Dimension(450, 663));
        setPreferredSize(new java.awt.Dimension(449, 663));
        setSize(new java.awt.Dimension(449, 663));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        javax.swing.GroupLayout panelCabeceraLayout = new javax.swing.GroupLayout(panelCabecera);
        panelCabecera.setLayout(panelCabeceraLayout);
        panelCabeceraLayout.setHorizontalGroup(
            panelCabeceraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );
        panelCabeceraLayout.setVerticalGroup(
            panelCabeceraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 680, Short.MAX_VALUE)
        );

        getContentPane().add(panelCabecera, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 20, 680));

        titulo.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        titulo.setText("Añadir oferta");

        labelEmpresa.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        labelEmpresa.setText("Empresa:");

        labelCiclo.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        labelCiclo.setText("Ciclo formativo:");

        labelTipo.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        labelTipo.setText("Tipo:");

        labelDescripcion.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        labelDescripcion.setText("Descripción:");

        labelRequisitos.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        labelRequisitos.setText("Requisitos");

        labelActiva.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        labelActiva.setText("Oferta activa:");

        labelContratadi.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        labelContratadi.setText("Alumno contratado:");

        idEmpresa.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        idEmpresa.setEnabled(false);

        inputEmpresa.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        inputEmpresa.setToolTipText("<html>Pulsa en el botón <b>buscar</b> para poder buscar <br>y seleccionar una empresa de las disponibles");

        btnBuscaEmpresa.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        btnBuscaEmpresa.setText("Buscar");
        btnBuscaEmpresa.setToolTipText("<html>Pulsa para <b>abrir el formulario de búsqueda</b> de empresas");
        btnBuscaEmpresa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscaEmpresaActionPerformed(evt);
            }
        });

        comboCiclos.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        comboCiclos.setToolTipText("<html>Selecciona el <b>ciclo formativo</b> al que asociar la oferta de empleo");

        comboTipo.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        comboTipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Prácticas", "Trabajo" }));
        comboTipo.setToolTipText("<html>Selecciona el <b>tipo de oferta</b>");

        textoDescripcion.setColumns(20);
        textoDescripcion.setRows(5);
        textoDescripcion.setToolTipText("<html>Escribe aquí detalladamente toda la <b>información referente a la oferta</b>");
        jScrollPaneDesc.setViewportView(textoDescripcion);

        textoRequisitos.setColumns(20);
        textoRequisitos.setRows(5);
        textoRequisitos.setToolTipText("<html>Escribe aquí todos los <b>requisitos referentes a la oferta</b>");
        jScrollPaneReq.setViewportView(textoRequisitos);

        checkActiva.setToolTipText("<html>Seleccionalo si la oferta<b> está activa actualmente</b></html>");

        checkContratado.setToolTipText("<html>Seleccionalo si hay constancia de que se <b> contrató a algún alumno</b></html>");

        fecha.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        fecha.setEnabled(false);

        btnCancelar.setBackground(new java.awt.Color(232, 232, 232));
        btnCancelar.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        btnCancelar.setText("Cancelar");
        btnCancelar.setToolTipText("<html>Pulsa para </b>cancelar</b> y salir del formulario");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnGuardar.setBackground(new java.awt.Color(232, 232, 232));
        btnGuardar.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.setToolTipText("<html>Pulsa para <b>guardar</b> o <b>modificar</b> los datos introducidos");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelContenidoLayout = new javax.swing.GroupLayout(panelContenido);
        panelContenido.setLayout(panelContenidoLayout);
        panelContenidoLayout.setHorizontalGroup(
            panelContenidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelContenidoLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(panelContenidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelContenidoLayout.createSequentialGroup()
                        .addGroup(panelContenidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPaneReq, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelContenidoLayout.createSequentialGroup()
                                .addComponent(labelTipo)
                                .addGap(102, 102, 102)
                                .addComponent(comboTipo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jScrollPaneDesc, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelContenidoLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(panelContenidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(panelContenidoLayout.createSequentialGroup()
                                        .addGroup(panelContenidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(panelContenidoLayout.createSequentialGroup()
                                                .addComponent(labelEmpresa)
                                                .addGap(38, 38, 38)
                                                .addComponent(idEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(labelCiclo))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(panelContenidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(comboCiclos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(panelContenidoLayout.createSequentialGroup()
                                                .addComponent(inputEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btnBuscaEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(panelContenidoLayout.createSequentialGroup()
                                        .addComponent(fecha, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(25, 25, 25)
                                        .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(37, 37, 37))
                    .addComponent(labelRequisitos)
                    .addComponent(labelDescripcion)
                    .addComponent(titulo, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelContenidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(panelContenidoLayout.createSequentialGroup()
                            .addComponent(labelActiva)
                            .addGap(52, 52, 52)
                            .addComponent(checkActiva))
                        .addGroup(panelContenidoLayout.createSequentialGroup()
                            .addComponent(labelContratadi)
                            .addGap(18, 18, 18)
                            .addComponent(checkContratado)))))
        );
        panelContenidoLayout.setVerticalGroup(
            panelContenidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelContenidoLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(titulo, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelContenidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelEmpresa)
                    .addComponent(inputEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscaEmpresa)
                    .addComponent(idEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(panelContenidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelCiclo)
                    .addComponent(comboCiclos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(panelContenidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelTipo)
                    .addComponent(comboTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addComponent(labelDescripcion)
                .addGap(20, 20, 20)
                .addComponent(jScrollPaneDesc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(labelRequisitos)
                .addGap(20, 20, 20)
                .addComponent(jScrollPaneReq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(panelContenidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelActiva, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(checkActiva, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(panelContenidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelContratadi, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(checkContratado, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(panelContenidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(54, 54, 54))
        );

        getContentPane().add(panelContenido, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 430, 680));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        boolean modificar = false, correcto = true;
        String esNueva, ciclo="", tipo="", descripcion, requisitos, fechaActual;
        int ofertaActiva, alumnoContratado, EmpresaID=0, cicloID=0;
        esNueva = titulo.getText();
        // cojo valor de idEmpresa
        try {
            EmpresaID = Integer.parseInt(idEmpresa.getText());
        } catch (Exception e) {
            System.out.println("ERROR: "+e.getMessage());
        }
        System.out.println("Valor de idEmpresa: "+EmpresaID);
        // cojo valor de ciclo formativo
        try {
            ciclo = comboCiclos.getSelectedItem().toString();
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        System.out.println("Valor de ciclo: "+ciclo);
        // cojo valor de 
        try {
            tipo = comboTipo.getSelectedItem().toString();
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        System.out.println("Valor de tipo: "+ciclo);
        // cojo el resto de valores
        descripcion = textoDescripcion.getText();
        requisitos = textoRequisitos.getText();
        if (checkActiva.isSelected()) {
            ofertaActiva = 1;
        } else {
            ofertaActiva = 0;
        }
        if (checkContratado.isSelected()) {
           alumnoContratado = 1;
        } else {
            alumnoContratado = 0;
        }
        // compruebo id empresa (que no sea 0 o vacío)
        if (EmpresaID == 0) {
            JOptionPane.showMessageDialog(null, "Debes seleccionar una empresa","Error", JOptionPane.WARNING_MESSAGE);
            correcto = false;
        }
        if (ciclo.equals("")) {
            JOptionPane.showMessageDialog(null, "No puedes dejar el campo ciclo sin seleccionar uno","Error", JOptionPane.WARNING_MESSAGE);
            correcto = false;
        }
        if (tipo.equals("")) {
            JOptionPane.showMessageDialog(null, "No puedes dejar el campo tipo sin seleccionar","Error", JOptionPane.WARNING_MESSAGE);
            correcto = false;
        }
        if (descripcion.equals("")) {
            JOptionPane.showMessageDialog(null, "No puedes dejar el campo descripción sin rellenar","Error", JOptionPane.WARNING_MESSAGE);
            correcto = false;
        }
        if (requisitos.equals("")) {
            JOptionPane.showMessageDialog(null, "No puedes dejar el campo requisitos sin rellenar","Error", JOptionPane.WARNING_MESSAGE);
            correcto = false;
        }
        // compruebo si es añadir o modificar
        if (esNueva.equals("Añadir oferta")) {
            modificar = false;
        } else {
            modificar = true;
        }
        System.out.println("VALOR MODIFICAR: "+modificar);
        System.out.println("VALOR CORRECTO: "+correcto);
        if (!modificar && correcto==true) {
            // creo la fecha y hora como identificador de la oferta
            Date fecha = new Date();
            SimpleDateFormat formatoFecha = new SimpleDateFormat("MM-dd-yyyy hh:mm:ss");
            String fechaSTR = formatoFecha.format(fecha);
            System.out.println("MENSAJE: Busco ciclo asociodado al combo seleccionado");
            cicloID = dameIdCiclo(ciclo);
            System.out.println("MENSAJE: Voy a guardar nueva oferta de empleo");
            try {
                PreparedStatement insertarSQL;
                insertarSQL = this.bd.dameConexion().prepareStatement("INSERT INTO oferta (fecha_publicacion,empresa,ciclo_formativo,activa,tipo,descripcion,requisitos,alumno_contratado) VALUES (?,?,?,?,?,?,?,?)");
                insertarSQL.setString(1, fechaSTR);
                insertarSQL.setInt(2, EmpresaID);
                insertarSQL.setInt(3, cicloID);
                insertarSQL.setInt(4, ofertaActiva);
                insertarSQL.setString(5, tipo);
                insertarSQL.setString(6, descripcion);
                insertarSQL.setString(7, requisitos);
                insertarSQL.setInt(8, alumnoContratado);
                insertarSQL.executeUpdate();
                this.setVisible(false);
                JOptionPane.showMessageDialog(null, "Oferta de empleo guardada correctamente","Exito al guardar", JOptionPane.INFORMATION_MESSAGE);
                aplicacion.muestraTablaOfertas("", "", false);
            } catch(SQLException e) {
                JOptionPane.showMessageDialog(null, e.getMessage(),"Error SQL", JOptionPane.WARNING_MESSAGE);
            }
            aplicacion.desactivarBotones();
        } else if (modificar && correcto) {
            System.out.println("MENSAJE: Busco ciclo asociodado al combo seleccionado");
            cicloID = dameIdCiclo(ciclo);
            System.out.println("MENSAJE: Voy a guardar nueva oferta de empleo");
            String fechaStr = fecha.getText();
            try {
                PreparedStatement insertarSQL;
                insertarSQL = this.bd.dameConexion().prepareStatement("UPDATE oferta SET empresa = ?, ciclo_formativo = ?, activa = ?, tipo = ?, descripcion = ?, requisitos = ?, alumno_contratado = ? WHERE fecha_publicacion = ?");
                insertarSQL.setString(8, fechaStr);
                insertarSQL.setInt(1, EmpresaID);
                insertarSQL.setInt(2, cicloID);
                insertarSQL.setInt(3, ofertaActiva);
                insertarSQL.setString(4, tipo);
                insertarSQL.setString(5, descripcion);
                insertarSQL.setString(6, requisitos);
                insertarSQL.setInt(7, alumnoContratado);
                insertarSQL.executeUpdate();
                this.setVisible(false);
                JOptionPane.showMessageDialog(null, "Oferta de empleo modificada correctamente","Exito al guardar", JOptionPane.INFORMATION_MESSAGE);
                aplicacion.muestraTablaOfertas("", "", false);
            } catch(SQLException e) {
                JOptionPane.showMessageDialog(null, e.getMessage(),"Error SQL", JOptionPane.WARNING_MESSAGE);
            }
            aplicacion.desactivarBotones();
        } else {
            System.out.println("NO DEBERÍA HACER NADA...");
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnBuscaEmpresaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscaEmpresaActionPerformed
        System.out.println("MENSAJE: Abro formulario búsqueda de empresa");
        buscaEmpresaForm.darConexionAbierta(bd);
        buscaEmpresaForm.darVentanaApp(this);
        buscaEmpresaForm.setAlwaysOnTop(true);
        buscaEmpresaForm.preparaFormBusqueda();
        buscaEmpresaForm.setVisible(true);
    }//GEN-LAST:event_btnBuscaEmpresaActionPerformed

    
    /**
     * Prepara el formulario para nueva venta
     */
    void preparaFormNuevo() {
        this.setResizable(false);
        panelCabecera.setBackground(colorPanelCabecera);
        panelContenido.setBackground(colorPanelContenido);
        titulo.setText("Añadir oferta");
        this.setTitle("Añadir oferta");
        fecha.setText("");
        idEmpresa.setText("");
        inputEmpresa.setText("");
        comboTipo.setSelectedIndex(-1);
        textoDescripcion.setText("");
        textoRequisitos.setText("");
        checkActiva.setSelected(false);
        checkContratado.setSelected(false);
        rellenaCombo("");
        comboCiclos.setSelectedIndex(-1);
        Dimension tamInput = new Dimension(150,26);
        inputEmpresa.setPreferredSize(tamInput);
        inputEmpresa.setMaximumSize(tamInput);
        inputEmpresa.setMinimumSize(tamInput);
        comboCiclos.setPreferredSize(tamInput);
        comboCiclos.setMaximumSize(tamInput);
        comboCiclos.setMinimumSize(tamInput);
        comboTipo.setPreferredSize(tamInput);
        comboTipo.setMaximumSize(tamInput);
        comboTipo.setMinimumSize(tamInput);
        fecha.setVisible(false);
    }
    
    /**
     * Prepara el formulario para modificar oferta
     * @param fecha
     * @param empresa
     * @param ciclo
     * @param activa
     * @param tipo
     * @param descripcion
     * @param requisitos
     * @param alumnoContratado 
     */
    void preparaFormMod(String fecha, int empresa, int ciclo, int activa, String tipo, String descripcion, String requisitos, int alumnoContratado) {
        this.setResizable(false);
        panelCabecera.setBackground(colorPanelCabecera);
        panelContenido.setBackground(colorPanelContenido);
        titulo.setText("Añadir oferta");
        this.setTitle("Añadir oferta");
        Dimension tamInput = new Dimension(150,26);
        inputEmpresa.setPreferredSize(tamInput);
        inputEmpresa.setMaximumSize(tamInput);
        inputEmpresa.setMinimumSize(tamInput);
        comboCiclos.setPreferredSize(tamInput);
        comboCiclos.setMaximumSize(tamInput);
        comboCiclos.setMinimumSize(tamInput);
        comboTipo.setPreferredSize(tamInput);
        comboTipo.setMaximumSize(tamInput);
        comboTipo.setMinimumSize(tamInput);
        titulo.setText("Modificar oferta");
        this.setTitle("Modificar oferta");
        this.fecha.setText(fecha);
        rellenaCombo(dameNombreCiclo(ciclo));
        idEmpresa.setText(Integer.toString(empresa));
        inputEmpresa.setText(buscaEmpresa(empresa));
        for (int i=0; i < comboTipo.getItemCount(); i++){
            if (tipo.equals(comboTipo.getItemAt(i))) {
                comboTipo.setSelectedIndex(i);
            }
        }
        textoDescripcion.setText(descripcion);
        textoRequisitos.setText(requisitos);
        System.out.println("**** VALOR DE OFERTA ACTIVA: "+activa);
        if (activa == 1) {
            checkActiva.setSelected(true);
        } else {
            checkActiva.setSelected(false);
        }
        if (alumnoContratado == 1) {
            checkContratado.setSelected(true);
        } else {
            checkContratado.setSelected(false);
        }
        this.fecha.setVisible(false);
    }
    
    private String buscaEmpresa(int id) {
        String nombre="";
        try {
            ResultSet rs;
            PreparedStatement consulta;
            consulta = this.bd.dameConexion().prepareStatement("SELECT nombre FROM empresa WHERE empresa_id = ?");
            consulta.setInt(1, id);
            rs = consulta.executeQuery();
            nombre = rs.getString("nombre");
            System.out.println("MENSAJE: Nombre de empresa obtenido "+nombre);
        } catch (SQLException e) {
            System.out.println("ERROR: "+e.getMessage());
        }
        return nombre;
    }
    
    /**
     * Rellena el combo de ciclo formativo
     * @param cicloYaEstablecido 
     */
    private void rellenaCombo(String cicloYaEstablecido) {
        comboCiclos.removeAllItems();
        boolean esta = false;
        ArrayList<String> ciclos = new ArrayList<>();
        ResultSet rs;
        PreparedStatement consulta;
        String nombreCiclo;
        try {
            consulta = this.bd.dameConexion().prepareStatement("SELECT * FROM ciclo");
            rs = consulta.executeQuery();
            do {
                nombreCiclo = rs.getString("nombre");
                for (String fp : ciclos) {
                    if (fp.equals(nombreCiclo)) {
                        esta = true;
                    }
                }
                if (!esta) {
                    ciclos.add(nombreCiclo);
                }
                esta = false;
            } while (rs.next());
        } catch (SQLException e) {
            System.out.println("ERROR: "+e.getMessage());
        }
        ciclos.forEach((ciclo) -> {
            comboCiclos.addItem(ciclo);
        });
        for (int i = 0; i < comboCiclos.getItemCount(); i++) {
            if (cicloYaEstablecido.equals(comboCiclos.getItemAt(i))) {
                comboCiclos.setSelectedIndex(i);
            }
        }
    }
    
    private String dameNombreCiclo(int codigo) {
        String nombre="";
        try {
            ResultSet rs;
            PreparedStatement consulta;
            consulta = this.bd.dameConexion().prepareStatement("SELECT nombre FROM ciclo WHERE codigo_junta = ?");
            consulta.setInt(1, codigo);
            rs = consulta.executeQuery();
            nombre = rs.getString("nombre");
            System.out.println("MENSAJE: Nombre de ciclo obtenido "+nombre);
        } catch (SQLException e) {
            System.out.println("ERROR: "+e.getMessage());
        }
        return nombre;
    }
    
    /**
     * Valida el ciclo formativo escogido en el combo 
     * y devuelve su codigo_junta
     */
    private int dameIdCiclo(String nombre) {
        int id=0;
        try {
            ResultSet rs;
            PreparedStatement consulta;
            consulta = this.bd.dameConexion().prepareStatement("SELECT codigo_junta FROM ciclo WHERE nombre = ?");
            consulta.setString(1, nombre);
            rs = consulta.executeQuery();
            id = rs.getInt("codigo_junta");
            System.out.println("MENSAJE: código de junta obtenido "+id);
        } catch (SQLException e) {
            System.out.println("ERROR: "+e.getMessage());
        } 
        return id;
    }
    
    /**
     * Pone los datos de la empresa selecciona en la busqueda
     * @param nombre
     * @param id 
     */
    public void ponerDatosEmpresas(String nombre, int id) {
        inputEmpresa.setText(nombre);
        idEmpresa.setText(Integer.toString(id));
    }
    
    /**
     * Coge la conexión abierta a la BD por la aplicación
     * @param con 
     */
    public void darConexionAbierta(BD con) {
        System.out.println("AVISO: Paso la conexión BD a nuevo ciclo");
        this.bd = con;
    }
    
    /**
     * Me permite pasar la ventana de la aplicación abierta
     * @param aplicacion
     */
    public void darVentanaApp(App aplicacion) {
        System.out.println("Paso la ventana de aplicación abierta");
        this.aplicacion = aplicacion;
    }
    
    // Formularios
    FormularioBusquedaEmpresas buscaEmpresaForm = new FormularioBusquedaEmpresas((Frame)getParent(), rootPaneCheckingEnabled);
    
    // Clase APP
    private App aplicacion;
    
    // Clase BD
    private BD bd;
    
    // Colores del formulario
    Color colorPanelCabecera = new Color(85, 136, 163);
    Color colorPanelContenido = new Color(232, 232, 232);

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscaEmpresa;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JCheckBox checkActiva;
    private javax.swing.JCheckBox checkContratado;
    private javax.swing.JComboBox<String> comboCiclos;
    private javax.swing.JComboBox<String> comboTipo;
    private javax.swing.JTextField fecha;
    private javax.swing.JTextField idEmpresa;
    private javax.swing.JTextField inputEmpresa;
    private javax.swing.JScrollPane jScrollPaneDesc;
    private javax.swing.JScrollPane jScrollPaneReq;
    private javax.swing.JLabel labelActiva;
    private javax.swing.JLabel labelCiclo;
    private javax.swing.JLabel labelContratadi;
    private javax.swing.JLabel labelDescripcion;
    private javax.swing.JLabel labelEmpresa;
    private javax.swing.JLabel labelRequisitos;
    private javax.swing.JLabel labelTipo;
    private javax.swing.JPanel panelCabecera;
    private javax.swing.JPanel panelContenido;
    private javax.swing.JTextArea textoDescripcion;
    private javax.swing.JTextArea textoRequisitos;
    private javax.swing.JLabel titulo;
    // End of variables declaration//GEN-END:variables
}
