/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bolsaempleo;

import java.awt.Color;
import java.awt.Dimension;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author ruben
 */
public class FormularioAlumnos extends javax.swing.JDialog {

    /**
     * Creates new form FormularioAlumnos
     */
    public FormularioAlumnos(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelCabecera = new javax.swing.JPanel();
        panelContenido = new javax.swing.JPanel();
        titulo = new javax.swing.JLabel();
        labelNombre = new javax.swing.JLabel();
        labelEmail = new javax.swing.JLabel();
        labelCiclo = new javax.swing.JLabel();
        labelExp = new javax.swing.JLabel();
        labelTrabajando = new javax.swing.JLabel();
        inputNombre = new javax.swing.JTextField();
        inputEmail = new javax.swing.JTextField();
        comboCiclos = new javax.swing.JComboBox<>();
        checkTrabaja = new javax.swing.JCheckBox();
        btnCancelar = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        id = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        textoExperiencia = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        javax.swing.GroupLayout panelCabeceraLayout = new javax.swing.GroupLayout(panelCabecera);
        panelCabecera.setLayout(panelCabeceraLayout);
        panelCabeceraLayout.setHorizontalGroup(
            panelCabeceraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );
        panelCabeceraLayout.setVerticalGroup(
            panelCabeceraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 480, Short.MAX_VALUE)
        );

        getContentPane().add(panelCabecera, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 20, 480));

        titulo.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        titulo.setText("Añadir alumno");

        labelNombre.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        labelNombre.setText("Nombre:");

        labelEmail.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        labelEmail.setText("Email:");

        labelCiclo.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        labelCiclo.setText("Ciclo formativo:");

        labelExp.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        labelExp.setText("Experiencia:");

        labelTrabajando.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        labelTrabajando.setText("Trabaja actualmente:");

        inputNombre.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        inputNombre.setToolTipText("<html>Introduce aquí el nombre del <b>alumno</b>");

        inputEmail.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        inputEmail.setToolTipText("<html>Introduce aquí el <b>email</b> del alumno");

        comboCiclos.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        comboCiclos.setToolTipText("<html>Selecciona el <b>ciclo formativo</b> que tiene el alumno");

        checkTrabaja.setToolTipText("<html>Seleccionalo si el alumno<b> está trabajando actualmente</b></html>");

        btnCancelar.setBackground(new java.awt.Color(232, 232, 232));
        btnCancelar.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        btnCancelar.setText("Cancelar");
        btnCancelar.setToolTipText("<html>Pulsa para </b>cancelar</b> y salir del formulario");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnGuardar.setBackground(new java.awt.Color(232, 232, 232));
        btnGuardar.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.setToolTipText("<html>Pulsa para <b>guardar</b> o <b>modificar</b> los datos introducidos");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        id.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        id.setEnabled(false);

        textoExperiencia.setColumns(20);
        textoExperiencia.setRows(5);
        textoExperiencia.setToolTipText("<html>Introduce aquí todos los datos sobre<b> experiencia </b><br>\ny otros <b>títulos/cursos</b> que tenga el alumno");
        jScrollPane1.setViewportView(textoExperiencia);

        javax.swing.GroupLayout panelContenidoLayout = new javax.swing.GroupLayout(panelContenido);
        panelContenido.setLayout(panelContenidoLayout);
        panelContenidoLayout.setHorizontalGroup(
            panelContenidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelContenidoLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(panelContenidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelContenidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(labelExp)
                        .addGroup(panelContenidoLayout.createSequentialGroup()
                            .addComponent(labelNombre)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 76, Short.MAX_VALUE)
                            .addComponent(inputNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(titulo, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelContenidoLayout.createSequentialGroup()
                            .addGroup(panelContenidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(labelEmail)
                                .addComponent(labelCiclo))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                            .addGroup(panelContenidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(inputEmail, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                                .addComponent(comboCiclos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(jScrollPane1))
                    .addGroup(panelContenidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelContenidoLayout.createSequentialGroup()
                            .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(25, 25, 25)
                            .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(panelContenidoLayout.createSequentialGroup()
                            .addComponent(labelTrabajando)
                            .addGap(128, 128, 128)
                            .addComponent(checkTrabaja))))
                .addGap(36, 36, 36))
        );
        panelContenidoLayout.setVerticalGroup(
            panelContenidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelContenidoLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(titulo, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(panelContenidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelNombre)
                    .addComponent(inputNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(panelContenidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelEmail)
                    .addComponent(inputEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(panelContenidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelCiclo)
                    .addComponent(comboCiclos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addComponent(labelExp)
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(panelContenidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelContenidoLayout.createSequentialGroup()
                        .addComponent(labelTrabajando)
                        .addGap(20, 20, 20)
                        .addGroup(panelContenidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(checkTrabaja, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );

        getContentPane().add(panelContenido, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 350, 480));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        boolean modificar = false, correcto = true;
        String nombre, email, experiencia, ciclo="", esNuevo;
        int trabajando, codigoCiclo=0, idAlumno=0;
        esNuevo = titulo.getText();
        try {
            idAlumno = Integer.parseInt(id.getText());
        } catch (Exception e) {
            System.out.println("ERROR: "+e.getMessage());
        }
        nombre = inputNombre.getText();
        email = inputEmail.getText();
        try {
            ciclo = comboCiclos.getSelectedItem().toString();
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        System.out.println("Valor de ciclo: "+ciclo);
        experiencia = textoExperiencia.getText();
        if (checkTrabaja.isSelected()) {
            trabajando = 1;
        } else {
            trabajando = 0;
        }
        if (nombre.equals("")) {
            JOptionPane.showMessageDialog(null, "No puedes dejar el campo nombre vacío","Error", JOptionPane.WARNING_MESSAGE);
            correcto = false;
        }
        if (email.equals("")) {
            JOptionPane.showMessageDialog(null, "No puedes dejar el campo email vacío","Error", JOptionPane.WARNING_MESSAGE);
            correcto = false;
        }
        if (ciclo.equals("")) {
            JOptionPane.showMessageDialog(null, "No puedes dejar el campo ciclo sin seleccionar uno","Error", JOptionPane.WARNING_MESSAGE);
            correcto = false;
        }
        // compruebo si es añadir o modificar
        if (esNuevo.equals("Añadir alumno")) {
            modificar = false;
        } else {
            modificar = true;
        }
        if (!modificar && correcto) {
            System.out.println("MENSAJE: Busco ciclo asociodado al combo seleccionado");
            codigoCiclo = dameIdCiclo(ciclo);
            System.out.println("MENSAJE: Voy a guardar nuevo alumno");
            try {
                PreparedStatement insertarSQL;
                insertarSQL = this.bd.dameConexion().prepareStatement("INSERT INTO alumno (nombre,email,experiencia,trabajando,ciclo_formativo) VALUES (?,?,?,?,?)");
                insertarSQL.setString(1, nombre);
                insertarSQL.setString(2, email);
                insertarSQL.setString(3, experiencia);
                insertarSQL.setInt(4, trabajando);
                insertarSQL.setInt(5, codigoCiclo);
                insertarSQL.executeUpdate();
                this.setVisible(false);
                JOptionPane.showMessageDialog(null, "Alumno guardado correctamente","Exito al guardar", JOptionPane.INFORMATION_MESSAGE);
                aplicacion.muestraTablaAlumnos("", "", false);
            } catch(SQLException e) {
                JOptionPane.showMessageDialog(null, e.getMessage(),"Error SQL", JOptionPane.WARNING_MESSAGE);
            }
            aplicacion.desactivarBotones();
        } else {
            System.out.println("MENSAJE: Busco ciclo asociodado al combo seleccionado");
            codigoCiclo = dameIdCiclo(ciclo);
            System.out.println("CODIGO:::"+codigoCiclo);
            System.out.println("MENSAJE: Voy a modificar el alumno");
            try {
                PreparedStatement insertarSQL;
                insertarSQL = this.bd.dameConexion().prepareStatement("UPDATE alumno SET nombre = ?, email = ?, experiencia = ?, trabajando = ?, ciclo_formativo = ? WHERE alumno_id = ?");
                insertarSQL.setString(1, nombre);
                insertarSQL.setString(2, email);
                insertarSQL.setString(3, experiencia);
                insertarSQL.setInt(4, trabajando);
                insertarSQL.setInt(5, codigoCiclo);
                insertarSQL.setInt(6, idAlumno);
                insertarSQL.executeUpdate();
                this.setVisible(false);
                JOptionPane.showMessageDialog(null, "Alumno modificado correctamente","Exito al guardar", JOptionPane.INFORMATION_MESSAGE);
                aplicacion.muestraTablaAlumnos("", "", false);
            } catch(SQLException e) {
                JOptionPane.showMessageDialog(null, e.getMessage(),"Error SQL", JOptionPane.WARNING_MESSAGE);
            }
            aplicacion.desactivarBotones();
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    
    /**
     * Configura el formulario para añadir un nuevo alumno
     */
    public void preparaFormNuevo() {
        this.setResizable(false);
        panelCabecera.setBackground(colorPanelCabecera);
        panelContenido.setBackground(colorPanelContenido);
        titulo.setText("Añadir alumno");
        this.setTitle("Añadir alumno");
        id.setText("");
        inputNombre.setText("");
        inputEmail.setText("");
        textoExperiencia.setText("");
        checkTrabaja.setSelected(false);
        rellenaCombo("");
        Dimension tamInput = new Dimension(150,26);
        inputNombre.setPreferredSize(tamInput);
        inputNombre.setMaximumSize(tamInput);
        inputNombre.setMinimumSize(tamInput);
        inputEmail.setPreferredSize(tamInput);
        inputEmail.setMaximumSize(tamInput);
        inputEmail.setMinimumSize(tamInput);
        comboCiclos.setPreferredSize(tamInput);
        comboCiclos.setMaximumSize(tamInput);
        comboCiclos.setMinimumSize(tamInput);
        id.setVisible(false);
    }
    
    public void preparaFormMod(int idAlumno, String nombre, String email, String experiencia , int trabajando, String ciclo) {
        this.setResizable(false);
        panelCabecera.setBackground(colorPanelCabecera);
        panelContenido.setBackground(colorPanelContenido);
        titulo.setText("Modificar alumno");
        this.setTitle("Modificar alumno");
        id.setText(Integer.toString(idAlumno));
        inputNombre.setText(nombre);
        inputEmail.setText(email);
        textoExperiencia.setText(experiencia);
        if (trabajando == 1) {
            checkTrabaja.setSelected(true);
        } else {
            checkTrabaja.setSelected(false);
        }
        rellenaCombo(ciclo);
        Dimension tamInput = new Dimension(150,26);
        inputNombre.setPreferredSize(tamInput);
        inputNombre.setMaximumSize(tamInput);
        inputNombre.setMinimumSize(tamInput);
        inputEmail.setPreferredSize(tamInput);
        inputEmail.setMaximumSize(tamInput);
        inputEmail.setMinimumSize(tamInput);
        comboCiclos.setPreferredSize(tamInput);
        comboCiclos.setMaximumSize(tamInput);
        comboCiclos.setMinimumSize(tamInput);
        id.setVisible(false);
    }
    
    /**
     * Rellena el combo de ciclo formativo
     * @param cicloYaEstablecido 
     */
    private void rellenaCombo(String cicloYaEstablecido) {
        comboCiclos.removeAllItems();
        boolean esta = false;
        ArrayList<String> ciclos = new ArrayList<>();
        ResultSet rs;
        PreparedStatement consulta;
        String nombreCiclo;
        try {
            consulta = this.bd.dameConexion().prepareStatement("SELECT * FROM ciclo");
            rs = consulta.executeQuery();
            do {
                nombreCiclo = rs.getString("nombre");
                for (String fp : ciclos) {
                    if (fp.equals(nombreCiclo)) {
                        esta = true;
                    }
                }
                if (!esta) {
                    ciclos.add(nombreCiclo);
                }
                esta = false;
            } while (rs.next());
        } catch (SQLException e) {
            System.out.println("ERROR: "+e.getMessage());
        }
        ciclos.forEach((ciclo) -> {
            comboCiclos.addItem(ciclo);
        });
        for (int i = 0; i < comboCiclos.getItemCount(); i++) {
            if (cicloYaEstablecido.equals(comboCiclos.getItemAt(i))) {
                comboCiclos.setSelectedIndex(i);
            }
        }
    }
    
    /**
     * Valida el ciclo formativo escogido en el combo 
     * y devuelve su codigo_junta
     */
    private int dameIdCiclo(String nombre) {
        int id=0;
        try {
            ResultSet rs;
            PreparedStatement consulta;
            consulta = this.bd.dameConexion().prepareStatement("SELECT codigo_junta FROM ciclo WHERE nombre = ?");
            consulta.setString(1, nombre);
            rs = consulta.executeQuery();
            id = rs.getInt("codigo_junta");
            System.out.println("MENSAJE: código de junta obtenido "+id);
        } catch (SQLException e) {
            System.out.println("ERROR: "+e.getMessage());
        } 
        return id;
    }
    
    /**
     * Coge la conexión abierta a la BD por la aplicación
     * @param con 
     */
    public void darConexionAbierta(BD con) {
        System.out.println("AVISO: Paso la conexión BD a nuevo ciclo");
        this.bd = con;
    }
    
    /**
     * Me permite pasar la ventana de la aplicación abierta
     * @param aplicacion
     */
    public void darVentanaApp(App aplicacion) {
        System.out.println("Paso la ventana de aplicación abierta");
        this.aplicacion = aplicacion;
    }
    
    // Clase APP
    private App aplicacion;
    
    // Clase BD
    private BD bd;
    
    // Colores del formulario
    Color colorPanelCabecera = new Color(85, 136, 163);
    Color colorPanelContenido = new Color(232, 232, 232);

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JCheckBox checkTrabaja;
    private javax.swing.JComboBox<String> comboCiclos;
    private javax.swing.JTextField id;
    private javax.swing.JTextField inputEmail;
    private javax.swing.JTextField inputNombre;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelCiclo;
    private javax.swing.JLabel labelEmail;
    private javax.swing.JLabel labelExp;
    private javax.swing.JLabel labelNombre;
    private javax.swing.JLabel labelTrabajando;
    private javax.swing.JPanel panelCabecera;
    private javax.swing.JPanel panelContenido;
    private javax.swing.JTextArea textoExperiencia;
    private javax.swing.JLabel titulo;
    // End of variables declaration//GEN-END:variables
}
